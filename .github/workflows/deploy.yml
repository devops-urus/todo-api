# In .github/workflows/deploy.yml

name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  SERVICE_NAME: todo-api
  REGION: us-central1

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_base64: ${{ steps.build-image.outputs.image_name_base64 }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
      
      - id: build-image
        name: Build, Push, and Encode Image Name
        run: |
          IMAGE_TAG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/todo-api-repo/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          # THE FIX: Encode the image tag in Base64 before setting it as an output
          echo "image_name_base64=$(echo -n $IMAGE_TAG | base64)" >> $GITHUB_OUTPUT

  deploy-to-cloud-run:
    name: Deploy to Cloud Run
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      
      # NEW STEP: Decode the image name we received from the previous job
      - name: Decode Image Name
        id: decode-image
        run: echo "image_name=$(echo -n ${{ needs.build-and-push.outputs.image_base64 }} | base64 --decode)" >> $GITHUB_OUTPUT
          
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          # Use the DECODED image name from the step above
          image: ${{ steps.decode-image.outputs.image_name }}
          env_vars: |
            DATABASE_URL=postgresql://postgres:${{ secrets.DB_PASSWORD }}@/?host=/cloudsql/${{ secrets.GCP_SQL_CONNECTION_NAME }}
          flags: '--add-cloudsql-instances=${{ secrets.GCP_SQL_CONNECTION_NAME }}'
