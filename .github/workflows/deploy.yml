# In .github/workflows/deploy.yml

name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  SERVICE_NAME: todo-api
  REGION: us-central1

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build and Push Image
        id: build-image
        run: |
          IMAGE_TAG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/todo-api-repo/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT

  # We are temporarily commenting out the deploy job to debug the output
  # deploy-to-cloud-run:
  #   name: Deploy to Cloud Run
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v2
  #       with:
  #         credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
  #     - name: Deploy to Cloud Run
  #       uses: google-github-actions/deploy-cloudrun@v2
  #       with:
  #         service: ${{ env.SERVICE_NAME }}
  #         region: ${{ env.REGION }}
  #         image: ${{ needs.build-and-push.outputs.image }}
  #         env_vars: |
  #           DATABASE_URL=postgresql://postgres:${{ secrets.DB_PASSWORD }}@/?host=/cloudsql/${{ secrets.GCP_SQL_CONNECTION_NAME }}
  #         flags: '--add-cloudsql-instances=${{ secrets.GCP_SQL_CONNECTION_NAME }}'

  debug:
    name: Debug Output
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Print the image name from the build job
        # This will show us exactly what the next job receives.
        # I've added quotes and markers to make it obvious if the string is empty.
        run: echo "The image name received is >>>${{ needs.build-and-push.outputs.image }}<<<"