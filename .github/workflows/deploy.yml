# In .github/workflows/deploy.yml

name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  SERVICE_NAME: todo-api
  REGION: us-central1

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    # The job's output is named 'image'
    outputs:
      image: ${{ steps.build-image.outputs.image_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
      
      # --- THIS STEP IS THE FIX ---
      # The 'id' must be at the top level of the step.
      # The output from this step is named 'image_name'.
      - id: build-image
        name: Build and Push Image
        run: |
          IMAGE_TAG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/todo-api-repo/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          # Set the output for this step.
          echo "image_name=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-to-cloud-run:
    name: Deploy to Cloud Run
    needs: build-and-push # Depends on the job above
    runs-on: ubuntu-latest

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
          
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          # This now correctly receives the 'image' output from the 'needs' context
          image: ${{ needs.build-and-push.outputs.image }}
          env_vars: |
            DATABASE_URL=postgresql://postgres:${{ secrets.DB_PASSWORD }}@/?host=/cloudsql/${{ secrets.GCP_SQL_CONNECTION_NAME }}
          flags: '--add-cloudsql-instances=${{ secrets.GCP_SQL_CONNECTION_NAME }}'