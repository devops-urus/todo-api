name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1 # The region of our Artifact Registry
  SERVICE_NAME: todo-api   # The name of our Cloud Run service
  REGION: us-central1      # The region for our Cloud Run service

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    # We need to output the image name to use it in the next job
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate to Google Cloud so we can push to Artifact Registry
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # Build and push the Docker image
      - name: Build and Push Image
        id: build-image # Give this step an ID to reference its outputs
        run: |
          IMAGE_TAG=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/todo-api-repo/${{ env.SERVICE_NAME }}:${{ github.sha }}
          
          docker build -t $IMAGE_TAG .
          
          docker push $IMAGE_TAG
          
          echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-to-cloud-run:
    name: Deploy to Cloud Run
    needs: build-and-push # This job depends on the previous one finishing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # The actual deployment step
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          # Use the image that was built and pushed in the previous job
          image: ${{ needs.build-and-push.outputs.image }}
          # Connect our service to the Cloud SQL database
          add-cloudsql-instances: ${{ secrets.GCP_SQL_CONNECTION_NAME }}
          # Set the database password as a secret environment variable
          secrets:
            - name: DB_PASSWORD
              value: '${{ secrets.DB_PASSWORD }}'
          # Set the database URL as a regular environment variable
          env-vars: |
            DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@/?host=/cloudsql/${{ secrets.GCP_SQL_CONNECTION_NAME }}